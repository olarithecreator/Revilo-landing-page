import { useState, useEffect } from "react";
import { Link } from "react-router-dom";

const templates = [
  { type: "Black", id: "Black", access: "free" },
  { type: "White", id: "White", access: "locked" },
  { type: "Minimal", id: "Minimal", access: "free" },
  { type: "Vibrant", id: "Vibrant", access: "locked" },
  { type: "Modern", id: "Modern", access: "locked" },
  { type: "Elegant", id: "Elegant", access: "locked" },
  { type: "Lucid", id: "Lucid", access: "locked" },
];

const scrapedComments = [
  "Super fast delivery, love it!",
  "Great customer care and communication.",
  "Very professional and timely!",
  "Loved my outfit, exactly as described.",
  "Excellent packaging and presentation!",
  "My friends keep asking where I ordered from.",
  "This is now my go-to page for all gifts!"
];

export default function Template() {
  const [userInstagram, setUserInstagram] = useState("");
  const [downloads, setDownloads] = useState([]);
  const [showSharePopup, setShowSharePopup] = useState(false);
  const [shareTemplate, setShareTemplate] = useState(null);

  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    setUserInstagram(params.get("instagram") || "your_handle");
    const storedDownloads = JSON.parse(localStorage.getItem("downloads")) || [];
    setDownloads(storedDownloads);
  }, []);

  useEffect(() => {
    document.title = "Templates - Revilo";
    const metaDesc = document.querySelector('meta[name="description"]');
    if (metaDesc) metaDesc.setAttribute("content", "Browse our stunning review card templates.");
  }, []);

  const handleDownload = (template) => {
    const freeDownloads = downloads.filter(d => d.access === "free").length;
    if (template.access === "locked") {
      alert("This template is for paid users only.");
      return;
    }
    if (template.access === "free" && freeDownloads >= 2) {
      alert("Free users can only download 2 templates (Minimal and Black). Please upgrade.");
      return;
    }

    window.open(`/templates/${template.id}.png`, "_blank");

    const newDownload = {
      templateId: template.id,
      templateName: template.type,
      date: new Date().toISOString(),
      instagram: userInstagram,
      access: template.access
    };
    const updated = [...downloads, newDownload];
    localStorage.setItem("downloads", JSON.stringify(updated));
    setDownloads(updated);
    setShareTemplate(template);
    setShowSharePopup(true);
  };

  const getTopUsers = () => {
    const map = {};
    downloads.forEach(d => {
      map[d.instagram] = (map[d.instagram] || 0) + 1;
    });
    return Object.entries(map).sort((a, b) => b[1] - a[1]);
  };

  return (
    <div className="flex flex-col md:flex-row min-h-screen font-sans">
      {/* Sidebar */}
      <aside className="w-full md:w-56 bg-indigo-900 text-white p-6 flex flex-col justify-between md:min-h-screen">
        <div>
          <h2 className="font-serif text-2xl mb-5">Řevilo</h2>
          <p className="text-sm mb-10">Turn your social comments into stunning review cards.</p>
          <nav className="flex flex-col gap-4">
            <Link to="/template" className="bg-yellow-100 text-indigo-900 py-2 rounded font-bold text-center hover:bg-yellow-200 transition">Templates</Link>
            <Link to="/dashboard" className="py-2 rounded border border-white text-center hover:bg-white hover:text-indigo-900 transition">Dashboard</Link>
          </nav>
        </div>
        <a
          href="https://reviloapp.netlify.app"
          target="_blank"
          rel="noopener noreferrer"
          className="mt-10 py-3 bg-gradient-to-r from-purple-300 to-pink-200 text-indigo-900 font-bold text-base rounded-lg shadow-md text-center hover:from-pink-200 hover:to-purple-300 hover:text-white transition"
        >
          ← Back to Revilo Home
        </a>
      </aside>

      {/* Main content */}
      <main className="flex-1 bg-gray-50 p-6">
        <h1 className="text-2xl md:text-3xl text-gray-800 mb-6">Templates</h1>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {templates.map((t, i) => {
            const isLocked = t.access === "locked";
            const comment = scrapedComments[i % scrapedComments.length];
            return (
              <div key={t.id} className={`bg-white rounded-xl p-5 text-center shadow-md transition-all ${isLocked ? 'filter blur-sm grayscale' : ''}`}>
                <img src={`/templates/${t.id}.png`} alt={t.type} className="w-full mb-3 rounded" />
                <h3 className="font-bold text-lg mb-1">{t.type}</h3>
                <p className="text-xs italic min-h-[40px] mb-2">{comment}</p>
                <p className="text-xs mt-2 opacity-60">Generated by {t.access === "free" ? "revilo" : `@${userInstagram}`}</p>
                {isLocked ? (
                  <button disabled className="mt-3 bg-gray-300 text-white py-2 px-4 rounded w-full cursor-not-allowed">🔒 Locked</button>
                ) : (
                  <button onClick={() => handleDownload(t)} className="mt-3 bg-indigo-900 text-white py-2 px-4 rounded w-full hover:bg-indigo-800 transition">Download</button>
                )}
              </div>
            );
          })}
        </div>
      </main>
    </div>
  );
} 